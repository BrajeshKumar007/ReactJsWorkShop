{"version":3,"sources":["components/MovieCard/index.module.css","pages/Home/index.module.css","utils/service.ts","utils/constants.ts","components/MovieCard/index.tsx","components/MovieCard/Skeleton.tsx","pages/Home/index.tsx"],"names":["module","exports","getBaseURL","url","renameKey","obj","oldKey","newKey","hasOwnProperty","service","get","params","a","fetch","method","cache","headers","then","res","json","response","contentItems","page","content","forEach","item","post","data","body","JSON","stringify","CONSTANTS","BASE_URL","MovieCard","name","imgUrl","Poster","Card","className","styles","root","CardActionArea","cardArea","CardMedia","component","alt","height","image","title","poster","CardContent","overText","Skeleton","animation","variant","width","CardActions","actionsContainer","Home","useState","currentPage","setCurrentPage","useInfiniteQuery","pageParam","getNextPageParam","lastPage","pages","totalContent","onSuccess","error","fetchNextPage","hasNextPage","isSuccess","isLoading","allItems","refetch","remove","flatMap","MoviesLoader","itemCount","Grid","container","spacing","Array","map","_","i","xs","md","sm","lg","xl","justify","movieListContainer","dataLength","length","next","hasMore","loader","style","overflow","errorMessageContainer"],"mappings":"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","file":"static/js/4.8f01ae6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MovieCard_root__2bcf8\",\"cardArea\":\"MovieCard_cardArea__1J9BP\",\"actionsContainer\":\"MovieCard_actionsContainer__1dvYF\",\"poster\":\"MovieCard_poster__2Q8RD\",\"overText\":\"MovieCard_overText__1Feuh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Home_root__1JBnY\",\"searchBox\":\"Home_searchBox__2CTQr\",\"movieListContainer\":\"Home_movieListContainer__3kbho\",\"errorMessageContainer\":\"Home_errorMessageContainer__2diO7\"};","\n/**\n * Generate base URL including OMDB required params\n * @param {string} url\n * @returns {string}\n */\nconst getBaseURL = (url: string): string => {\n  return `${url}`;\n};\n// Function to rename a key in an object\nfunction renameKey(obj: any, oldKey: any, newKey: any) {\n  if (obj.hasOwnProperty(oldKey)) {\n    obj[newKey] = obj[oldKey];\n    delete obj[oldKey];\n  }\n}\n/**\n * Service object exported to use across application\n */\nconst service = {\n  get: async (url: string, params: string) => {\n    try {\n      let response = await fetch(\n        `${getBaseURL(url + params)}`,\n        {\n          method: \"GET\",\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n          },\n        }\n      ).then((res) => res.json());\n\n      // if (!response.page.title) {\n      //   throw Error(response.Error);\n      // } else {\n        const contentItems = response.page[\"content-items\"].content;\n        contentItems.forEach((item:any) => {\n          renameKey(item, \"poster-image\", \"Poster\");\n        });\n        let obj ={\n          contentItems,\n          \"totalContent\":response.page[\"total-content-items\"]\n        }        \n        return obj;\n      // }\n    } catch (error) {\n      throw error;\n    }\n  },\n  post: async (url: string, data: object) => {\n    const response = await fetch(getBaseURL(url), {\n      method: \"POST\",\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  },\n};\n\nexport default service;\n","const CONSTANTS = {\n  BASE_URL: \"https://test.create.diagnal.com/\",\n};\n\nexport default CONSTANTS;\n","import styles from \"./index.module.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nexport type MovieCardProps = {\n  name: string;\n  Poster: string;\n};\nconst MovieCard =({ name,Poster }: MovieCardProps) => {\n  let imgUrl=\"https://test.create.diagnal.com/images/\"+Poster\n  return (\n    <Card className={styles.root}>\n      <CardActionArea className={styles.cardArea}>\n        <CardMedia\n          component=\"img\"\n          alt={name}\n          height=\"400\"\n          image={imgUrl}\n          title={name}\n          className={styles.poster}\n        />\n        <CardContent className={styles.overText}>\n            <p>{name}</p>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n\nexport default MovieCard;\n","import styles from \"./index.module.css\";\nimport { default as MuiSkeleton } from \"@material-ui/lab/Skeleton\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst Skeleton = (): React.ReactElement => {\n  return (\n    <Card className={styles.root}>\n      <CardActionArea>\n        <MuiSkeleton\n          animation=\"wave\"\n          variant=\"rect\"\n          width=\"100%\"\n          height={400}\n        />\n        <CardContent className={styles.overText}>\n          <MuiSkeleton\n            animation=\"wave\"\n            variant=\"text\"\n            width=\"80%\"\n            height={40}\n          />\n        </CardContent>\n      </CardActionArea>\n      <CardActions className={styles.actionsContainer}>\n        <MuiSkeleton animation=\"wave\" variant=\"text\" width={100} height={40} />\n        <MuiSkeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Skeleton;\n","import { useState, useEffect, ReactElement } from \"react\";\nimport styles from \"./index.module.css\";\nimport service from \"utils/service\";\nimport CONSTANTS from \"utils/constants\";\nimport { useInfiniteQuery } from \"react-query\";\nimport MovieCard, { MovieCardProps } from \"components/MovieCard\";\nimport Skeleton from \"components/MovieCard/Skeleton\";\nimport { Grid } from \"@material-ui/core\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst Home = (): ReactElement => {\n  const [currentPage, setCurrentPage] = useState(0);\n  const fetchMovies = ({ pageParam = 1 }) =>\n  service.get(CONSTANTS.BASE_URL,`data/page${pageParam}.json`);\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isSuccess,\n    isLoading,\n    refetch,\n    remove,\n  } = useInfiniteQuery(`movies`, fetchMovies, {\n    getNextPageParam: (lastPage, pages) => {      \n      return +lastPage.totalContent > currentPage * 20 ? currentPage + 1 : null;\n    },\n    onSuccess: () => {\n      setCurrentPage(currentPage + 1);\n    },\n  });\n\n  const allItems = data?.pages.flatMap((page) => page.contentItems) || [];\n    const MoviesLoader = (itemCount: number): ReactElement => {\n    return (\n      <Grid container spacing={2}>\n        {[...new Array(itemCount)].map((_, i: number) => (\n          <Grid item xs={12} md={3} sm={4} lg={12} xl={12} key={i}>\n            <Skeleton />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  return (\n    <div className={styles.root}>\n      <Grid container justify=\"center\">\n        <Grid item xs={12} sm={10}>\n          <Grid item xs={12} className={styles.movieListContainer}>\n            {/* Loading state */}\n            {isLoading && MoviesLoader(8)}\n\n            {/* Success state */}\n            {isSuccess &&\n              (!!data ? (\n                <InfiniteScroll\n                  dataLength={\n                    allItems.length\n                  }\n                  next={fetchNextPage}\n                  hasMore={hasNextPage || false}\n                  loader={MoviesLoader(4)}\n                  style={{ overflow: \"hidden\" }}\n                >\n                  <Grid container spacing={2}>\n                    {allItems.map(({\n                          name,\n                          Poster,\n                        }: MovieCardProps) => (\n                          <Grid item xs={4} md={3} sm={4} xl={6} lg={3}>\n                            <MovieCard\n                             {...{ name, Poster }}\n                            />\n                          </Grid>\n                        )\n                      )}\n                  </Grid>\n                </InfiniteScroll>\n              ) : (\n                \"No Result\"\n              ))}\n\n            {/* Error state */}\n            {!!error && (\n              <div className={styles.errorMessageContainer}>\n                {JSON.stringify(error)}\n              </div>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}