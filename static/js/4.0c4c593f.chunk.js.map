{"version":3,"sources":["pages/Home/index.module.css","components/AppHeader/index.module.css","utils/service.ts","utils/constants.ts","components/MovieCard/index.tsx","components/MovieCard/Skeleton.tsx","components/SearchBox/index.tsx","components/AppHeader/index.tsx","pages/Home/index.tsx","components/MovieCard/index.module.css"],"names":["module","exports","getBaseURL","url","renameKey","obj","oldKey","newKey","hasOwnProperty","service","get","params","a","fetch","method","cache","headers","then","res","json","response","contentItems","page","content","forEach","item","post","data","body","JSON","stringify","CONSTANTS","BASE_URL","MovieCard","name","imgUrl","Poster","Card","className","styles","root","CardActionArea","cardArea","CardMedia","component","alt","height","image","title","poster","CardContent","overText","Skeleton","animation","variant","width","CardActions","actionsContainer","useStyles","makeStyles","theme","padding","display","alignItems","backgroundColor","border","input","marginLeft","spacing","flex","iconButton","SearchBox","onChange","classes","inputRef","useRef","handleChange","current","text","value","isClose","Paper","InputBase","placeholder","fullWidth","onKeyPress","e","key","IconButton","type","onClick","defaultProps","AppHeader","useState","openSearch","setOpenSearch","handleSearchChange","headerName","style","position","margin","searchBox","aria-label","searchBtn","Close","Home","currentPage","setCurrentPage","allItems","setAllItems","moviePerPage","setmoviePerPage","searchText","setsearchText","fetchMovies","pageParam","useInfiniteQuery","getNextPageParam","lastPage","pages","totalContent","onSuccess","onError","err","console","log","isLoading","error","fetchNextPage","hasNextPage","isSuccess","refetch","remove","useEffect","tempdata","flatMap","MoviesLoader","itemCount","Grid","container","Array","map","_","i","xs","md","searchtext","filter","element","toLowerCase","includes","length","justify","sm","movieListContainer","dataLength","next","hasMore","loader","overflow","xl","lg","errorMessageContainer"],"mappings":"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","file":"static/js/4.0c4c593f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Home_root__1JBnY\",\"movieListContainer\":\"Home_movieListContainer__3kbho\",\"errorMessageContainer\":\"Home_errorMessageContainer__2diO7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"AppHeader_root__CJ9jg\",\"backBtn\":\"AppHeader_backBtn__1Jm2O\",\"headerName\":\"AppHeader_headerName__1W0l5\",\"searchBtn\":\"AppHeader_searchBtn__2ePlP\",\"searchField\":\"AppHeader_searchField__52R4B\"};","\n/**\n * Generate base URL including OMDB required params\n * @param {string} url\n * @returns {string}\n */\nconst getBaseURL = (url: string): string => {\n  return `${url}`;\n};\n// Function to rename a key in an object\nfunction renameKey(obj: any, oldKey: any, newKey: any) {\n  if (obj.hasOwnProperty(oldKey)) {\n    obj[newKey] = obj[oldKey];\n    delete obj[oldKey];\n  }\n}\n/**\n * Service object exported to use across application\n */\nconst service = {\n  get: async (url: string, params: string) => {\n    try {\n      let response = await fetch(\n        `${getBaseURL(url + params)}`,\n        {\n          method: \"GET\",\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n          },\n        }\n      ).then((res) => res.json());\n\n      // if (!response.page.title) {\n      //   throw Error(response.Error);\n      // } else {\n        const contentItems = response.page[\"content-items\"].content;\n        contentItems.forEach((item:any) => {\n          renameKey(item, \"poster-image\", \"Poster\");\n        });\n        let obj ={\n          contentItems,\n          \"totalContent\":response.page[\"total-content-items\"]\n        }        \n        return obj;\n      // }\n    } catch (error) {\n      throw error;\n    }\n  },\n  post: async (url: string, data: object) => {\n    const response = await fetch(getBaseURL(url), {\n      method: \"POST\",\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  },\n};\n\nexport default service;\n","const CONSTANTS = {\n  BASE_URL: \"https://test.create.diagnal.com/\",\n};\n\nexport default CONSTANTS;\n","import styles from \"./index.module.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nexport type MovieCardProps = {\n  name: string;\n  Poster: string;\n};\nconst MovieCard =({ name,Poster }: MovieCardProps) => {\n  let imgUrl=\"https://test.create.diagnal.com/images/\"+Poster\n  return (\n    <Card className={styles.root}>\n      <CardActionArea className={styles.cardArea}>\n        <CardMedia\n          component=\"img\"\n          alt={name}\n          height=\"400\"\n          image={imgUrl}\n          title={name}\n          className={styles.poster}\n        />\n        <CardContent className={styles.overText}>\n            <p>{name}</p>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n\nexport default MovieCard;\n","import styles from \"./index.module.css\";\nimport { default as MuiSkeleton } from \"@material-ui/lab/Skeleton\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst Skeleton = (): React.ReactElement => {\n  return (\n    <Card className={styles.root}>\n      <CardActionArea>\n        <MuiSkeleton\n          animation=\"wave\"\n          variant=\"rect\"\n          width=\"100%\"\n          height={400}\n        />\n        <CardContent className={styles.overText}>\n          <MuiSkeleton\n            animation=\"wave\"\n            variant=\"text\"\n            width=\"80%\"\n            height={40}\n          />\n        </CardContent>\n      </CardActionArea>\n      <CardActions className={styles.actionsContainer}>\n        <MuiSkeleton animation=\"wave\" variant=\"text\" width={100} height={40} />\n        <MuiSkeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Skeleton;\n","import { ReactElement, useRef } from \"react\";\nimport { makeStyles, Paper, InputBase, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\ntype SearchBoxProps = {\n  onChange: (text: any) => void;\n  className?: string;\n};\nconst defaultProps = {\n  onChange: () => {},\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: \"#000000\",\n    border: \"1px solid #737373\",\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n}));\n\nconst SearchBox = ({ onChange, className }: SearchBoxProps): ReactElement => {\n  const classes = useStyles();\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const handleChange = () => {\n    if (!!inputRef.current) {\n      let obj ={\n        text:inputRef.current.value,\n        isClose:false\n      }\n      onChange(obj);\n    }\n  };\n\n  return (\n    <Paper className={`${classes.root} ${className}`}>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Search for a movie\"\n        inputRef={inputRef}\n        fullWidth\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            handleChange();\n          }\n        }}\n      />\n      <IconButton\n        type=\"submit\"\n        className={classes.iconButton}\n        onClick={handleChange}\n      >\n        <SearchIcon />\n      </IconButton>\n    </Paper>\n  );\n};\n\nSearchBox.defaultProps = defaultProps;\n\nexport default SearchBox;\n","import { InputBase, Paper } from \"@material-ui/core\";\nimport styles from \"./index.module.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Close } from '@material-ui/icons';\nimport { useState } from \"react\";\nimport SearchBox from \"components/SearchBox\";\ntype SearchBoxPropsFn = {\n  onChange: (text: string) => void;\n};\nconst defaultProps = {\n  onChange: () => {},\n};\nconst AppHeader = ({ onChange }: SearchBoxPropsFn): React.ReactElement => {\n\n  const [openSearch, setOpenSearch] = useState(false);\n\n  const handleSearchChange = (text: any) => {\n    onChange(text);\n  };\n  return (\n    <>\n      <div className={styles.root}>\n        {/* <IconButton\n          aria-label=\"back\"\n          className={styles.backBtn}\n        >\n          <ArrowBack />\n        </IconButton> */}\n        <p className={styles.headerName}>{!openSearch ?\"Romantic Comedy\":\"\"}</p>\n        {openSearch && <div style={{ position: \"absolute\", margin:\"0 10px\"}}>\n           <SearchBox\n                className={styles.searchBox}\n                 onChange={handleSearchChange}\n              />\n        </div>}\n        {!openSearch ? <>\n          <IconButton aria-label=\"search\" className={styles.searchBtn} >\n          <SearchIcon onClick={() => {\n            openSearch ? setOpenSearch(false) : setOpenSearch(true)\n          }} />\n        </IconButton>\n        </>:<>\n        <IconButton aria-label=\"directions\" className={styles.searchBtn} >\n              <Close onClick={() => {\n                setOpenSearch(false)\n                let obj ={\n                  text:\"\",\n                  isClose:true\n                }\n                handleSearchChange(obj)\n              }} />\n            </IconButton>\n        </>\n        }\n      </div>\n\n    </>\n  );\n};\n\nexport default AppHeader;\n","import { useState, useEffect, ReactElement } from \"react\";\nimport styles from \"./index.module.css\";\nimport service from \"utils/service\";\nimport CONSTANTS from \"utils/constants\";\nimport { useInfiniteQuery } from \"react-query\";\nimport MovieCard, { MovieCardProps } from \"components/MovieCard\";\nimport Skeleton from \"components/MovieCard/Skeleton\";\nimport { Grid } from \"@material-ui/core\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport AppHeader from \"components/AppHeader\";\n\nconst Home = (): ReactElement => {\n  const [currentPage, setCurrentPage] = useState(0);\n  const [allItems, setAllItems] = useState([]);\n  const [moviePerPage, setmoviePerPage] = useState(20);\n  const [searchText, setsearchText] = useState({});\n\n\n  const fetchMovies = ({ pageParam = 1 }) =>\n\n  service.get(CONSTANTS.BASE_URL,`data/page${pageParam}.json`);\n\n  var {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isSuccess,\n    isLoading,\n    refetch,\n    remove,\n  } = useInfiniteQuery(`movies`, fetchMovies, {\n    getNextPageParam: (lastPage, pages) => {      \n      return +lastPage.totalContent > currentPage * moviePerPage ? currentPage + 1 : null;\n    },\n    onSuccess: () => {\n      setCurrentPage(currentPage + 1);\n    },\n    onError(err) {\n      console.log(\"err\",err);\n      isLoading = false\n    },\n  });\n\n \n\n  useEffect(()=>{\n     if(searchText==false){\n        fetchMovies({})\n     }\n\n    let tempdata:any = data?.pages.flatMap((page) => page.contentItems) || [];\n    setAllItems(tempdata)\n\n  },[data?.pages])\n\n\n  const handleSearchChange = (searchtext:any) => {   \n    console.log(\"abcd---\",searchtext);\n    setsearchText(searchtext.text)\n     let text = searchtext.text\n    setAllItems([])\n    if(text){\n     let tempdata:any =   data?.pages.flatMap((page) => page.contentItems).filter(element => {\n        return element.name.toLowerCase().includes(text.toLowerCase());\n      });\n      setAllItems(tempdata)\n      setCurrentPage(0);\n      setmoviePerPage(tempdata.length)\n      isLoading = false\n    }else{\n      let tempdata:any = data?.pages.flatMap((page) => page.contentItems) || [];\n      setAllItems(tempdata)\n      setCurrentPage(0);\n      setmoviePerPage(tempdata.length)\n    }\n      };\n\n    const MoviesLoader = (itemCount: number): ReactElement => {\n    return (\n      <Grid container spacing={2}>\n        {[...new Array(itemCount)].map((_, i: number) => (\n          <Grid item xs={12} md={3}  key={i}>\n            <Skeleton />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n\n\n  return (\n    <div className={styles.root}>\n              <AppHeader \n               onChange={handleSearchChange}\n              />\n      <Grid container justify=\"center\">\n        <Grid item xs={12} sm={10}>\n          <Grid item xs={12}  className={styles.movieListContainer}>\n            {/* Loading state */}\n            {isLoading && MoviesLoader(8)}\n\n            {allItems.length>0 ? <>\n                <InfiniteScroll\n                  dataLength={\n                    allItems.length\n                  }\n                  next={fetchNextPage}\n                  hasMore={hasNextPage || false}\n                  loader={MoviesLoader(3)}\n                  style={{ overflow: \"hidden\" }}\n                  \n                >\n                  <Grid container spacing={2}>\n                    {allItems.map(({\n                          name,\n                          Poster,\n                        }: MovieCardProps) => (\n                          <Grid item xs={4} md={3} sm={4} xl={6} lg={3}>\n                            <MovieCard\n                             {...{ name, Poster }}\n                            />\n                          </Grid>\n                        )\n                      )}\n                  </Grid>\n                </InfiniteScroll>\n                </> : \"No Result Found\"}\n\n            {/* Error state */}\n            {!!error && (\n              <div className={styles.errorMessageContainer}>\n                {JSON.stringify(error)}\n              </div>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MovieCard_root__2bcf8\",\"cardArea\":\"MovieCard_cardArea__1J9BP\",\"actionsContainer\":\"MovieCard_actionsContainer__1dvYF\",\"poster\":\"MovieCard_poster__2Q8RD\",\"overText\":\"MovieCard_overText__1Feuh\"};"],"sourceRoot":""}