[{"D:\\ReactWorkShop\\src\\index.tsx":"1","D:\\ReactWorkShop\\src\\App.tsx":"2","D:\\ReactWorkShop\\src\\Layout\\index.tsx":"3","D:\\ReactWorkShop\\src\\components\\AppHeader\\index.tsx":"4","D:\\ReactWorkShop\\src\\pages\\Home\\index.tsx":"5","D:\\ReactWorkShop\\src\\components\\Fallback\\index.tsx":"6","D:\\ReactWorkShop\\src\\utils\\service.ts":"7","D:\\ReactWorkShop\\src\\utils\\constants.ts":"8","D:\\ReactWorkShop\\src\\components\\MovieCard\\Skeleton.tsx":"9","D:\\ReactWorkShop\\src\\components\\MovieCard\\index.tsx":"10"},{"size":220,"mtime":1694837748735,"results":"11","hashOfConfig":"12"},{"size":924,"mtime":1694841240493,"results":"13","hashOfConfig":"12"},{"size":693,"mtime":1694840721499,"results":"14","hashOfConfig":"12"},{"size":660,"mtime":1694848170267,"results":"15","hashOfConfig":"12"},{"size":2987,"mtime":1694869426095,"results":"16","hashOfConfig":"12"},{"size":303,"mtime":1694770576222,"results":"17","hashOfConfig":"12"},{"size":1886,"mtime":1694840837225,"results":"18","hashOfConfig":"12"},{"size":98,"mtime":1694780944804,"results":"19","hashOfConfig":"12"},{"size":1095,"mtime":1694770576241,"results":"20","hashOfConfig":"12"},{"size":894,"mtime":1694842631787,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"koaonl",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ReactWorkShop\\src\\index.tsx",[],"D:\\ReactWorkShop\\src\\App.tsx",[],"D:\\ReactWorkShop\\src\\Layout\\index.tsx",[],"D:\\ReactWorkShop\\src\\components\\AppHeader\\index.tsx",[],"D:\\ReactWorkShop\\src\\pages\\Home\\index.tsx",["43","44","45"],"import { useState, useEffect, ReactElement } from \"react\";\nimport styles from \"./index.module.css\";\nimport service from \"utils/service\";\nimport CONSTANTS from \"utils/constants\";\nimport { useInfiniteQuery } from \"react-query\";\nimport MovieCard, { MovieCardProps } from \"components/MovieCard\";\nimport Skeleton from \"components/MovieCard/Skeleton\";\nimport { Grid } from \"@material-ui/core\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst Home = (): ReactElement => {\n  const [currentPage, setCurrentPage] = useState(0);\n  const fetchMovies = ({ pageParam = 1 }) =>\n  service.get(CONSTANTS.BASE_URL,`data/page${pageParam}.json`);\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isSuccess,\n    isLoading,\n    refetch,\n    remove,\n  } = useInfiniteQuery(`movies`, fetchMovies, {\n    getNextPageParam: (lastPage, pages) => {      \n      return +lastPage.totalContent > currentPage * 20 ? currentPage + 1 : null;\n    },\n    onSuccess: () => {\n      setCurrentPage(currentPage + 1);\n    },\n  });\n\n  const allItems = data?.pages.flatMap((page) => page.contentItems) || [];\n    const MoviesLoader = (itemCount: number): ReactElement => {\n    return (\n      <Grid container spacing={2}>\n        {[...new Array(itemCount)].map((_, i: number) => (\n          <Grid item xs={12} md={3} sm={4} lg={12} xl={12} key={i}>\n            <Skeleton />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  return (\n    <div className={styles.root}>\n      <Grid container justify=\"center\">\n        <Grid item xs={12} sm={10}>\n          <Grid item xs={12} className={styles.movieListContainer}>\n            {/* Loading state */}\n            {isLoading && MoviesLoader(8)}\n\n            {/* Success state */}\n            {isSuccess &&\n              (!!data ? (\n                <InfiniteScroll\n                  dataLength={\n                    allItems.length\n                  }\n                  next={fetchNextPage}\n                  hasMore={hasNextPage || false}\n                  loader={MoviesLoader(4)}\n                  style={{ overflow: \"hidden\" }}\n                >\n                  <Grid container spacing={2}>\n                    {allItems.map(({\n                          name,\n                          Poster,\n                        }: MovieCardProps) => (\n                          <Grid item xs={4} md={3} sm={4} xl={6} lg={3}>\n                            <MovieCard\n                             {...{ name, Poster }}\n                            />\n                          </Grid>\n                        )\n                      )}\n                  </Grid>\n                </InfiniteScroll>\n              ) : (\n                \"No Result\"\n              ))}\n\n            {/* Error state */}\n            {!!error && (\n              <div className={styles.errorMessageContainer}>\n                {JSON.stringify(error)}\n              </div>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","D:\\ReactWorkShop\\src\\components\\Fallback\\index.tsx",[],"D:\\ReactWorkShop\\src\\utils\\service.ts",[],"D:\\ReactWorkShop\\src\\utils\\constants.ts",[],"D:\\ReactWorkShop\\src\\components\\MovieCard\\Skeleton.tsx",[],"D:\\ReactWorkShop\\src\\components\\MovieCard\\index.tsx",[],{"ruleId":"46","severity":1,"message":"47","line":1,"column":20,"nodeType":"48","messageId":"49","endLine":1,"endColumn":29},{"ruleId":"46","severity":1,"message":"50","line":22,"column":5,"nodeType":"48","messageId":"49","endLine":22,"endColumn":12},{"ruleId":"46","severity":1,"message":"51","line":23,"column":5,"nodeType":"48","messageId":"49","endLine":23,"endColumn":11},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'refetch' is assigned a value but never used.","'remove' is assigned a value but never used."]