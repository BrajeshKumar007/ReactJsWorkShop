{"ast":null,"code":"var _jsxFileName = \"D:\\\\DEMO\\\\src\\\\pages\\\\Home\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./index.module.css\";\nimport service from \"utils/service\";\nimport CONSTANTS from \"utils/constants\";\nimport { useInfiniteQuery } from \"react-query\";\nimport MovieCard from \"components/MovieCard\";\nimport Skeleton from \"components/MovieCard/Skeleton\";\nimport { Grid } from \"@material-ui/core\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [searchText, setSearchText] = useState(\"man\"); // Initial value set to 'man' to display default search results on UI\n\n  const [currentPage, setCurrentPage] = useState(0);\n  useEffect(() => {\n    setCurrentPage(0);\n    remove();\n    setTimeout(() => {\n      refetch();\n    }, 1000);\n  }, [searchText]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSearchChange = text => {\n    setSearchText(text);\n  };\n\n  const fetchMovies = ({\n    pageParam = 1\n  }) => service.get(CONSTANTS.BASE_URL, {\n    s: \"data/\",\n    page: `page${pageParam}.json`\n  });\n\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isSuccess,\n    isLoading,\n    refetch,\n    remove\n  } = useInfiniteQuery(`movies`, fetchMovies, {\n    getNextPageParam: (lastPage, pages) => {\n      return +lastPage.totalResults > currentPage * 10 ? currentPage + 1 : null;\n    },\n    enabled: !!searchText.length,\n    onSuccess: () => {\n      setCurrentPage(currentPage + 1);\n    }\n  });\n\n  const MoviesLoader = itemCount => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [...new Array(itemCount)].map((_, i) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.root,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 10,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          className: styles.movieListContainer,\n          children: [isLoading && MoviesLoader(8), isSuccess && (!!data ? /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n            dataLength: data.pages.reduce((a, b) => {\n              return {\n                Search: [...a.Search, ...b.Search]\n              };\n            }).Search.length,\n            next: fetchNextPage,\n            hasMore: hasNextPage || false,\n            loader: MoviesLoader(4),\n            style: {\n              overflow: \"hidden\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: data.pages.reduce((a, b) => {\n                return {\n                  Search: [...a.Search, ...b.Search]\n                };\n              }).Search.map(({\n                Title,\n                Poster\n              }) => /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(MovieCard, {\n                  Title,\n                  Poster\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 27\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this) : \"No Result\"), !!error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.errorMessageContainer,\n            children: JSON.stringify(error)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"qi4DQjDmr8AWLAHCJkbSySoOCVQ=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["D:/DEMO/src/pages/Home/index.tsx"],"names":["useState","useEffect","styles","service","CONSTANTS","useInfiniteQuery","MovieCard","Skeleton","Grid","InfiniteScroll","Home","searchText","setSearchText","currentPage","setCurrentPage","remove","setTimeout","refetch","handleSearchChange","text","fetchMovies","pageParam","get","BASE_URL","s","page","data","error","fetchNextPage","hasNextPage","isSuccess","isLoading","getNextPageParam","lastPage","pages","totalResults","enabled","length","onSuccess","MoviesLoader","itemCount","Array","map","_","i","root","movieListContainer","reduce","a","b","Search","overflow","Title","Poster","errorMessageContainer","JSON","stringify"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAkD,OAAlD;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAOC,SAAP,MAA0C,sBAA1C;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;;AAEA,MAAMC,IAAI,GAAG,MAAoB;AAAA;;AAC/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C,CAD+B,CACsB;;AACrD,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,cAAc,CAAC,CAAD,CAAd;AACAC,IAAAA,MAAM;AACNC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,OAAO;AACR,KAFS,EAEP,IAFO,CAAV;AAGD,GANQ,EAMN,CAACN,UAAD,CANM,CAAT,CAJ+B,CAUb;;AAElB,QAAMO,kBAAkB,GAAIC,IAAD,IAAkB;AAC3CP,IAAAA,aAAa,CAACO,IAAD,CAAb;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG,CAAC;AAAEC,IAAAA,SAAS,GAAG;AAAd,GAAD,KAClBlB,OAAO,CAACmB,GAAR,CAAYlB,SAAS,CAACmB,QAAtB,EAAgC;AAC9BC,IAAAA,CAAC,EAAE,OAD2B;AAE9BC,IAAAA,IAAI,EAAG,OAAMJ,SAAU;AAFO,GAAhC,CADF;;AAMA,QAAM;AACJK,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,SANI;AAOJd,IAAAA,OAPI;AAQJF,IAAAA;AARI,MASFV,gBAAgB,CAAE,QAAF,EAAWe,WAAX,EAAwB;AAC1CY,IAAAA,gBAAgB,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACrC,aAAO,CAACD,QAAQ,CAACE,YAAV,GAAyBtB,WAAW,GAAG,EAAvC,GAA4CA,WAAW,GAAG,CAA1D,GAA8D,IAArE;AACD,KAHyC;AAI1CuB,IAAAA,OAAO,EAAE,CAAC,CAACzB,UAAU,CAAC0B,MAJoB;AAK1CC,IAAAA,SAAS,EAAE,MAAM;AACfxB,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACD;AAPyC,GAAxB,CATpB;;AAmBA,QAAM0B,YAAY,GAAIC,SAAD,IAAqC;AACxD,wBACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,gBACG,CAAC,GAAG,IAAIC,KAAJ,CAAUD,SAAV,CAAJ,EAA0BE,GAA1B,CAA8B,CAACC,CAAD,EAAIC,CAAJ,kBAC7B,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,EAAE,EAAE,CAAvB;AAAA,+BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF,SAA+BA,CAA/B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAE1C,MAAM,CAAC2C,IAAvB;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,EAAE,EAAE,EAAvB;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAmB,UAAA,SAAS,EAAE3C,MAAM,CAAC4C,kBAArC;AAAA,qBAEGf,SAAS,IAAIQ,YAAY,CAAC,CAAD,CAF5B,EAKGT,SAAS,KACP,CAAC,CAACJ,IAAF,gBACC,QAAC,cAAD;AACE,YAAA,UAAU,EACRA,IAAI,CAACQ,KAAL,CAAWa,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1B,qBAAO;AAAEC,gBAAAA,MAAM,EAAE,CAAC,GAAGF,CAAC,CAACE,MAAN,EAAc,GAAGD,CAAC,CAACC,MAAnB;AAAV,eAAP;AACD,aAFD,EAEGA,MAFH,CAEUb,MAJd;AAME,YAAA,IAAI,EAAET,aANR;AAOE,YAAA,OAAO,EAAEC,WAAW,IAAI,KAP1B;AAQE,YAAA,MAAM,EAAEU,YAAY,CAAC,CAAD,CARtB;AASE,YAAA,KAAK,EAAE;AAAEY,cAAAA,QAAQ,EAAE;AAAZ,aATT;AAAA,mCAWE,QAAC,IAAD;AAAM,cAAA,SAAS,MAAf;AAAgB,cAAA,OAAO,EAAE,CAAzB;AAAA,wBACGzB,IAAI,CAACQ,KAAL,CACEa,MADF,CACS,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChB,uBAAO;AAAEC,kBAAAA,MAAM,EAAE,CAAC,GAAGF,CAAC,CAACE,MAAN,EAAc,GAAGD,CAAC,CAACC,MAAnB;AAAV,iBAAP;AACD,eAHF,EAIEA,MAJF,CAISR,GAJT,CAKG,CAAC;AACCU,gBAAAA,KADD;AAECC,gBAAAA;AAFD,eAAD,kBAIE,QAAC,IAAD;AAAM,gBAAA,IAAI,MAAV;AAAW,gBAAA,EAAE,EAAE,EAAf;AAAmB,gBAAA,EAAE,EAAE,CAAvB;AAAA,uCACE,QAAC,SAAD;AACQD,kBAAAA,KADR;AACeC,kBAAAA;AADf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBATL;AADH;AAAA;AAAA;AAAA;AAAA;AAXF;AAAA;AAAA;AAAA;AAAA,kBADD,GAgCC,WAjCM,CALZ,EA0CG,CAAC,CAAC1B,KAAF,iBACC;AAAK,YAAA,SAAS,EAAEzB,MAAM,CAACoD,qBAAvB;AAAA,sBACGC,IAAI,CAACC,SAAL,CAAe7B,KAAf;AADH;AAAA;AAAA;AAAA;AAAA,kBA3CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwDD,CA7GD;;GAAMjB,I;UA+BAL,gB;;;KA/BAK,I;AA+GN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect, ReactElement } from \"react\";\nimport styles from \"./index.module.css\";\nimport service from \"utils/service\";\nimport CONSTANTS from \"utils/constants\";\nimport { useInfiniteQuery } from \"react-query\";\nimport MovieCard, { MovieCardProps } from \"components/MovieCard\";\nimport Skeleton from \"components/MovieCard/Skeleton\";\nimport { Grid } from \"@material-ui/core\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst Home = (): ReactElement => {\n  const [searchText, setSearchText] = useState(\"man\"); // Initial value set to 'man' to display default search results on UI\n  const [currentPage, setCurrentPage] = useState(0);\n\n  useEffect(() => {\n    setCurrentPage(0);\n    remove();\n    setTimeout(() => {\n      refetch();\n    }, 1000);\n  }, [searchText]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSearchChange = (text: string) => {\n    setSearchText(text);\n  };\n\n  const fetchMovies = ({ pageParam = 1 }) =>\n    service.get(CONSTANTS.BASE_URL, {\n      s: \"data/\",\n      page: `page${pageParam}.json`,\n    });\n\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isSuccess,\n    isLoading,\n    refetch,\n    remove,\n  } = useInfiniteQuery(`movies`, fetchMovies, {\n    getNextPageParam: (lastPage, pages) => {\n      return +lastPage.totalResults > currentPage * 10 ? currentPage + 1 : null;\n    },\n    enabled: !!searchText.length,\n    onSuccess: () => {\n      setCurrentPage(currentPage + 1);\n    },\n  });\n\n  const MoviesLoader = (itemCount: number): ReactElement => {\n    return (\n      <Grid container spacing={2}>\n        {[...new Array(itemCount)].map((_, i: number) => (\n          <Grid item xs={12} md={3} key={i}>\n            <Skeleton />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  return (\n    <div className={styles.root}>\n      <Grid container justify=\"center\">\n        <Grid item xs={12} sm={10}>\n          <Grid item xs={12} className={styles.movieListContainer}>\n            {/* Loading state */}\n            {isLoading && MoviesLoader(8)}\n\n            {/* Success state */}\n            {isSuccess &&\n              (!!data ? (\n                <InfiniteScroll\n                  dataLength={\n                    data.pages.reduce((a, b) => {\n                      return { Search: [...a.Search, ...b.Search] };\n                    }).Search.length\n                  }\n                  next={fetchNextPage}\n                  hasMore={hasNextPage || false}\n                  loader={MoviesLoader(4)}\n                  style={{ overflow: \"hidden\" }}\n                >\n                  <Grid container spacing={2}>\n                    {data.pages\n                      .reduce((a, b) => {\n                        return { Search: [...a.Search, ...b.Search] };\n                      })\n                      .Search.map(\n                        ({\n                          Title,\n                          Poster,\n                        }: MovieCardProps) => (\n                          <Grid item xs={12} md={3} >\n                            <MovieCard\n                              {...{ Title, Poster }}\n                            />\n                          </Grid>\n                        )\n                      )}\n                  </Grid>\n                </InfiniteScroll>\n              ) : (\n                \"No Result\"\n              ))}\n\n            {/* Error state */}\n            {!!error && (\n              <div className={styles.errorMessageContainer}>\n                {JSON.stringify(error)}\n              </div>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}