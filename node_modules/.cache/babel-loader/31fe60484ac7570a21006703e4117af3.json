{"ast":null,"code":"/**\n * Generate base URL including OMDB required params\n * @param {string} url\n * @returns {string}\n */\nconst getBaseURL = url => {\n  return `${url}`;\n};\n/**\n * Service object exported to use across application\n */\n\n\nconst service = {\n  get: async (url, params) => {\n    try {\n      let response = await fetch(`${getBaseURL(url + params)}`, {\n        method: \"GET\",\n        cache: \"no-cache\",\n        // *default, no-cache, reload, force-cache, only-if-cached\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\" // application/x-www-form-urlencoded, application/json\n\n        }\n      }).then(res => res.json());\n\n      if (response.Response === \"False\") {\n        throw Error(response.Error);\n      } else {\n        return response;\n      }\n    } catch (error) {\n      throw error.message;\n    }\n  },\n  post: async (url, data) => {\n    const response = await fetch(getBaseURL(url), {\n      method: \"POST\",\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\" // application/x-www-form-urlencoded, application/json\n\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n};\nexport default service;","map":{"version":3,"sources":["D:/DEMO/src/utils/service.ts"],"names":["getBaseURL","url","service","get","params","response","fetch","method","cache","headers","then","res","json","Response","Error","error","message","post","data","body","JSON","stringify"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAIC,GAAD,IAAyB;AAC1C,SAAQ,GAAEA,GAAI,EAAd;AACD,CAFD;AAIA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,OAAOF,GAAP,EAAoBG,MAApB,KAAsC;AACzC,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CACvB,GAAEN,UAAU,CAACC,GAAG,GAACG,MAAL,CAAa,EADF,EAExB;AACEG,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,KAAK,EAAE,UAFT;AAEqB;AACnBC,QAAAA,OAAO,EAAE;AACP,0BAAgB,mCADT,CAC8C;;AAD9C;AAHX,OAFwB,CAAL,CASnBC,IATmB,CASbC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATK,CAArB;;AAWA,UAAIP,QAAQ,CAACQ,QAAT,KAAsB,OAA1B,EAAmC;AACjC,cAAMC,KAAK,CAACT,QAAQ,CAACS,KAAV,CAAX;AACD,OAFD,MAEO;AACL,eAAOT,QAAP;AACD;AACF,KAjBD,CAiBE,OAAOU,KAAP,EAAc;AACd,YAAMA,KAAK,CAACC,OAAZ;AACD;AACF,GAtBa;AAuBdC,EAAAA,IAAI,EAAE,OAAOhB,GAAP,EAAoBiB,IAApB,KAAqC;AACzC,UAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACN,UAAU,CAACC,GAAD,CAAX,EAAkB;AAC5CM,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,KAAK,EAAE,UAFqC;AAEzB;AACnBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,mCADT,CAC8C;;AAD9C,OAHmC;AAM5CU,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AANsC,KAAlB,CAA5B;AAQA,WAAOb,QAAQ,CAACO,IAAT,EAAP,CATyC,CASjB;AACzB;AAjCa,CAAhB;AAoCA,eAAeV,OAAf","sourcesContent":["import CONSTANTS from \"utils/constants\";\n\n/**\n * Generate base URL including OMDB required params\n * @param {string} url\n * @returns {string}\n */\nconst getBaseURL = (url: string): string => {\n  return `${url}`;\n};\n\n/**\n * Service object exported to use across application\n */\nconst service = {\n  get: async (url: string, params:string) => {    \n    try {\n      let response = await fetch(\n        `${getBaseURL(url+params)}`,\n        {\n          method: \"GET\",\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n          },\n        }\n      ).then((res) => res.json());\n\n      if (response.Response === \"False\") {\n        throw Error(response.Error);\n      } else {\n        return response;\n      }\n    } catch (error) {\n      throw error.message;\n    }\n  },\n  post: async (url: string, data: object) => {\n    const response = await fetch(getBaseURL(url), {\n      method: \"POST\",\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  },\n};\n\nexport default service;\n"]},"metadata":{},"sourceType":"module"}