{"ast":null,"code":"/**\n * Generate base URL including OMDB required params\n * @param {string} url\n * @returns {string}\n */\nconst getBaseURL = url => {\n  return `${url}`;\n}; // Function to rename a key in an object\n\n\nfunction renameKey(obj, oldKey, newKey) {\n  if (obj.hasOwnProperty(oldKey)) {\n    obj[newKey] = obj[oldKey];\n    delete obj[oldKey];\n  }\n}\n/**\n * Service object exported to use across application\n */\n\n\nconst service = {\n  get: async (url, params) => {\n    try {\n      let response = await fetch(`${getBaseURL(url + params)}`, {\n        method: \"GET\",\n        cache: \"no-cache\",\n        // *default, no-cache, reload, force-cache, only-if-cached\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\" // application/x-www-form-urlencoded, application/json\n\n        }\n      }).then(res => res.json()); // if (!response.page.title) {\n      //   throw Error(response.Error);\n      // } else {\n\n      const contentItems = response.page[\"content-items\"].content;\n      contentItems.forEach(item => {\n        renameKey(item, \"poster-image\", \"Poster\");\n      });\n      let obj = {\n        contentItems,\n        \"totalContent\": response.page[\"total-content-items\"]\n      };\n      return contentItems; // }\n    } catch (error) {\n      throw error;\n    }\n  },\n  post: async (url, data) => {\n    const response = await fetch(getBaseURL(url), {\n      method: \"POST\",\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\" // application/x-www-form-urlencoded, application/json\n\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n};\nexport default service;","map":{"version":3,"sources":["D:/DEMO/src/utils/service.ts"],"names":["getBaseURL","url","renameKey","obj","oldKey","newKey","hasOwnProperty","service","get","params","response","fetch","method","cache","headers","then","res","json","contentItems","page","content","forEach","item","error","post","data","body","JSON","stringify"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAIC,GAAD,IAAyB;AAC1C,SAAQ,GAAEA,GAAI,EAAd;AACD,CAFD,C,CAGA;;;AACA,SAASC,SAAT,CAAmBC,GAAnB,EAA6BC,MAA7B,EAA0CC,MAA1C,EAAuD;AACrD,MAAIF,GAAG,CAACG,cAAJ,CAAmBF,MAAnB,CAAJ,EAAgC;AAC9BD,IAAAA,GAAG,CAACE,MAAD,CAAH,GAAcF,GAAG,CAACC,MAAD,CAAjB;AACA,WAAOD,GAAG,CAACC,MAAD,CAAV;AACD;AACF;AACD;AACA;AACA;;;AACA,MAAMG,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,OAAOP,GAAP,EAAoBQ,MAApB,KAAuC;AAC1C,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CACvB,GAAEX,UAAU,CAACC,GAAG,GAAGQ,MAAP,CAAe,EADJ,EAExB;AACEG,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,KAAK,EAAE,UAFT;AAEqB;AACnBC,QAAAA,OAAO,EAAE;AACP,0BAAgB,mCADT,CAC8C;;AAD9C;AAHX,OAFwB,CAAL,CASnBC,IATmB,CASbC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATK,CAArB,CADE,CAYF;AACA;AACA;;AACE,YAAMC,YAAY,GAAGR,QAAQ,CAACS,IAAT,CAAc,eAAd,EAA+BC,OAApD;AACAF,MAAAA,YAAY,CAACG,OAAb,CAAsBC,IAAD,IAAc;AACjCpB,QAAAA,SAAS,CAACoB,IAAD,EAAO,cAAP,EAAuB,QAAvB,CAAT;AACD,OAFD;AAGA,UAAInB,GAAG,GAAE;AACPe,QAAAA,YADO;AAEP,wBAAeR,QAAQ,CAACS,IAAT,CAAc,qBAAd;AAFR,OAAT;AAIA,aAAOD,YAAP,CAvBA,CAwBF;AACD,KAzBD,CAyBE,OAAOK,KAAP,EAAc;AACd,YAAMA,KAAN;AACD;AACF,GA9Ba;AA+BdC,EAAAA,IAAI,EAAE,OAAOvB,GAAP,EAAoBwB,IAApB,KAAqC;AACzC,UAAMf,QAAQ,GAAG,MAAMC,KAAK,CAACX,UAAU,CAACC,GAAD,CAAX,EAAkB;AAC5CW,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,KAAK,EAAE,UAFqC;AAEzB;AACnBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,mCADT,CAC8C;;AAD9C,OAHmC;AAM5CY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AANsC,KAAlB,CAA5B;AAQA,WAAOf,QAAQ,CAACO,IAAT,EAAP,CATyC,CASjB;AACzB;AAzCa,CAAhB;AA4CA,eAAeV,OAAf","sourcesContent":["import CONSTANTS from \"utils/constants\";\n\n/**\n * Generate base URL including OMDB required params\n * @param {string} url\n * @returns {string}\n */\nconst getBaseURL = (url: string): string => {\n  return `${url}`;\n};\n// Function to rename a key in an object\nfunction renameKey(obj: any, oldKey: any, newKey: any) {\n  if (obj.hasOwnProperty(oldKey)) {\n    obj[newKey] = obj[oldKey];\n    delete obj[oldKey];\n  }\n}\n/**\n * Service object exported to use across application\n */\nconst service = {\n  get: async (url: string, params: string) => {\n    try {\n      let response = await fetch(\n        `${getBaseURL(url + params)}`,\n        {\n          method: \"GET\",\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n          },\n        }\n      ).then((res) => res.json());\n\n      // if (!response.page.title) {\n      //   throw Error(response.Error);\n      // } else {\n        const contentItems = response.page[\"content-items\"].content;\n        contentItems.forEach((item:any) => {\n          renameKey(item, \"poster-image\", \"Poster\");\n        });\n        let obj ={\n          contentItems,\n          \"totalContent\":response.page[\"total-content-items\"]\n        }        \n        return contentItems;\n      // }\n    } catch (error) {\n      throw error;\n    }\n  },\n  post: async (url: string, data: object) => {\n    const response = await fetch(getBaseURL(url), {\n      method: \"POST\",\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  },\n};\n\nexport default service;\n"]},"metadata":{},"sourceType":"module"}